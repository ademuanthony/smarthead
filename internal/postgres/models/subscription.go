// Code generated by SQLBoiler 3.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Subscription is an object representing the database table.
type Subscription struct {
	ID         string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	StudentID  string      `boil:"student_id" json:"student_id" toml:"student_id" yaml:"student_id"`
	SubjectID  string      `boil:"subject_id" json:"subject_id" toml:"subject_id" yaml:"subject_id"`
	DaysOfWeek int         `boil:"days_of_week" json:"days_of_week" toml:"days_of_week" yaml:"days_of_week"`
	StartDate  int64       `boil:"start_date" json:"start_date" toml:"start_date" yaml:"start_date"`
	EndDate    int64       `boil:"end_date" json:"end_date" toml:"end_date" yaml:"end_date"`
	CreatedAt  int64       `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ClassID    string      `boil:"class_id" json:"class_id" toml:"class_id" yaml:"class_id"`
	DepositID  string      `boil:"deposit_id" json:"deposit_id" toml:"deposit_id" yaml:"deposit_id"`
	PeriodID   null.String `boil:"period_id" json:"period_id,omitempty" toml:"period_id" yaml:"period_id,omitempty"`

	R *subscriptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L subscriptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SubscriptionColumns = struct {
	ID         string
	StudentID  string
	SubjectID  string
	DaysOfWeek string
	StartDate  string
	EndDate    string
	CreatedAt  string
	ClassID    string
	DepositID  string
	PeriodID   string
}{
	ID:         "id",
	StudentID:  "student_id",
	SubjectID:  "subject_id",
	DaysOfWeek: "days_of_week",
	StartDate:  "start_date",
	EndDate:    "end_date",
	CreatedAt:  "created_at",
	ClassID:    "class_id",
	DepositID:  "deposit_id",
	PeriodID:   "period_id",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var SubscriptionWhere = struct {
	ID         whereHelperstring
	StudentID  whereHelperstring
	SubjectID  whereHelperstring
	DaysOfWeek whereHelperint
	StartDate  whereHelperint64
	EndDate    whereHelperint64
	CreatedAt  whereHelperint64
	ClassID    whereHelperstring
	DepositID  whereHelperstring
	PeriodID   whereHelpernull_String
}{
	ID:         whereHelperstring{field: "\"subscription\".\"id\""},
	StudentID:  whereHelperstring{field: "\"subscription\".\"student_id\""},
	SubjectID:  whereHelperstring{field: "\"subscription\".\"subject_id\""},
	DaysOfWeek: whereHelperint{field: "\"subscription\".\"days_of_week\""},
	StartDate:  whereHelperint64{field: "\"subscription\".\"start_date\""},
	EndDate:    whereHelperint64{field: "\"subscription\".\"end_date\""},
	CreatedAt:  whereHelperint64{field: "\"subscription\".\"created_at\""},
	ClassID:    whereHelperstring{field: "\"subscription\".\"class_id\""},
	DepositID:  whereHelperstring{field: "\"subscription\".\"deposit_id\""},
	PeriodID:   whereHelpernull_String{field: "\"subscription\".\"period_id\""},
}

// SubscriptionRels is where relationship names are stored.
var SubscriptionRels = struct {
	Class   string
	Deposit string
	Period  string
	Student string
	Subject string
}{
	Class:   "Class",
	Deposit: "Deposit",
	Period:  "Period",
	Student: "Student",
	Subject: "Subject",
}

// subscriptionR is where relationships are stored.
type subscriptionR struct {
	Class   *Class
	Deposit *Deposit
	Period  *Period
	Student *Student
	Subject *Subject
}

// NewStruct creates a new relationship struct
func (*subscriptionR) NewStruct() *subscriptionR {
	return &subscriptionR{}
}

// subscriptionL is where Load methods for each relationship are stored.
type subscriptionL struct{}

var (
	subscriptionAllColumns            = []string{"id", "student_id", "subject_id", "days_of_week", "start_date", "end_date", "created_at", "class_id", "deposit_id", "period_id"}
	subscriptionColumnsWithoutDefault = []string{"id", "student_id", "subject_id", "days_of_week", "start_date", "end_date", "created_at", "class_id", "deposit_id", "period_id"}
	subscriptionColumnsWithDefault    = []string{}
	subscriptionPrimaryKeyColumns     = []string{"id"}
)

type (
	// SubscriptionSlice is an alias for a slice of pointers to Subscription.
	// This should generally be used opposed to []Subscription.
	SubscriptionSlice []*Subscription

	subscriptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	subscriptionType                 = reflect.TypeOf(&Subscription{})
	subscriptionMapping              = queries.MakeStructMapping(subscriptionType)
	subscriptionPrimaryKeyMapping, _ = queries.BindMapping(subscriptionType, subscriptionMapping, subscriptionPrimaryKeyColumns)
	subscriptionInsertCacheMut       sync.RWMutex
	subscriptionInsertCache          = make(map[string]insertCache)
	subscriptionUpdateCacheMut       sync.RWMutex
	subscriptionUpdateCache          = make(map[string]updateCache)
	subscriptionUpsertCacheMut       sync.RWMutex
	subscriptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single subscription record from the query.
func (q subscriptionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Subscription, error) {
	o := &Subscription{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for subscription")
	}

	return o, nil
}

// All returns all Subscription records from the query.
func (q subscriptionQuery) All(ctx context.Context, exec boil.ContextExecutor) (SubscriptionSlice, error) {
	var o []*Subscription

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Subscription slice")
	}

	return o, nil
}

// Count returns the count of all Subscription records in the query.
func (q subscriptionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count subscription rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q subscriptionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if subscription exists")
	}

	return count > 0, nil
}

// Class pointed to by the foreign key.
func (o *Subscription) Class(mods ...qm.QueryMod) classQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ClassID),
	}

	queryMods = append(queryMods, mods...)

	query := Classes(queryMods...)
	queries.SetFrom(query.Query, "\"classes\"")

	return query
}

// Deposit pointed to by the foreign key.
func (o *Subscription) Deposit(mods ...qm.QueryMod) depositQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DepositID),
	}

	queryMods = append(queryMods, mods...)

	query := Deposits(queryMods...)
	queries.SetFrom(query.Query, "\"deposits\"")

	return query
}

// Period pointed to by the foreign key.
func (o *Subscription) Period(mods ...qm.QueryMod) periodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PeriodID),
	}

	queryMods = append(queryMods, mods...)

	query := Periods(queryMods...)
	queries.SetFrom(query.Query, "\"period\"")

	return query
}

// Student pointed to by the foreign key.
func (o *Subscription) Student(mods ...qm.QueryMod) studentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StudentID),
	}

	queryMods = append(queryMods, mods...)

	query := Students(queryMods...)
	queries.SetFrom(query.Query, "\"student\"")

	return query
}

// Subject pointed to by the foreign key.
func (o *Subscription) Subject(mods ...qm.QueryMod) subjectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SubjectID),
	}

	queryMods = append(queryMods, mods...)

	query := Subjects(queryMods...)
	queries.SetFrom(query.Query, "\"subject\"")

	return query
}

// LoadClass allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subscriptionL) LoadClass(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubscription interface{}, mods queries.Applicator) error {
	var slice []*Subscription
	var object *Subscription

	if singular {
		object = maybeSubscription.(*Subscription)
	} else {
		slice = *maybeSubscription.(*[]*Subscription)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subscriptionR{}
		}
		args = append(args, object.ClassID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subscriptionR{}
			}

			for _, a := range args {
				if a == obj.ClassID {
					continue Outer
				}
			}

			args = append(args, obj.ClassID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`classes`), qm.WhereIn(`classes.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Class")
	}

	var resultSlice []*Class
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Class")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for classes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for classes")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Class = foreign
		if foreign.R == nil {
			foreign.R = &classR{}
		}
		foreign.R.Subscriptions = append(foreign.R.Subscriptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ClassID == foreign.ID {
				local.R.Class = foreign
				if foreign.R == nil {
					foreign.R = &classR{}
				}
				foreign.R.Subscriptions = append(foreign.R.Subscriptions, local)
				break
			}
		}
	}

	return nil
}

// LoadDeposit allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subscriptionL) LoadDeposit(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubscription interface{}, mods queries.Applicator) error {
	var slice []*Subscription
	var object *Subscription

	if singular {
		object = maybeSubscription.(*Subscription)
	} else {
		slice = *maybeSubscription.(*[]*Subscription)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subscriptionR{}
		}
		args = append(args, object.DepositID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subscriptionR{}
			}

			for _, a := range args {
				if a == obj.DepositID {
					continue Outer
				}
			}

			args = append(args, obj.DepositID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`deposits`), qm.WhereIn(`deposits.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Deposit")
	}

	var resultSlice []*Deposit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Deposit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for deposits")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for deposits")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Deposit = foreign
		if foreign.R == nil {
			foreign.R = &depositR{}
		}
		foreign.R.Subscriptions = append(foreign.R.Subscriptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DepositID == foreign.ID {
				local.R.Deposit = foreign
				if foreign.R == nil {
					foreign.R = &depositR{}
				}
				foreign.R.Subscriptions = append(foreign.R.Subscriptions, local)
				break
			}
		}
	}

	return nil
}

// LoadPeriod allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subscriptionL) LoadPeriod(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubscription interface{}, mods queries.Applicator) error {
	var slice []*Subscription
	var object *Subscription

	if singular {
		object = maybeSubscription.(*Subscription)
	} else {
		slice = *maybeSubscription.(*[]*Subscription)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subscriptionR{}
		}
		if !queries.IsNil(object.PeriodID) {
			args = append(args, object.PeriodID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subscriptionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PeriodID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PeriodID) {
				args = append(args, obj.PeriodID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`period`), qm.WhereIn(`period.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Period")
	}

	var resultSlice []*Period
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Period")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for period")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for period")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Period = foreign
		if foreign.R == nil {
			foreign.R = &periodR{}
		}
		foreign.R.Subscriptions = append(foreign.R.Subscriptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PeriodID, foreign.ID) {
				local.R.Period = foreign
				if foreign.R == nil {
					foreign.R = &periodR{}
				}
				foreign.R.Subscriptions = append(foreign.R.Subscriptions, local)
				break
			}
		}
	}

	return nil
}

// LoadStudent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subscriptionL) LoadStudent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubscription interface{}, mods queries.Applicator) error {
	var slice []*Subscription
	var object *Subscription

	if singular {
		object = maybeSubscription.(*Subscription)
	} else {
		slice = *maybeSubscription.(*[]*Subscription)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subscriptionR{}
		}
		args = append(args, object.StudentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subscriptionR{}
			}

			for _, a := range args {
				if a == obj.StudentID {
					continue Outer
				}
			}

			args = append(args, obj.StudentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`student`), qm.WhereIn(`student.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Student")
	}

	var resultSlice []*Student
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Student")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for student")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for student")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Student = foreign
		if foreign.R == nil {
			foreign.R = &studentR{}
		}
		foreign.R.Subscriptions = append(foreign.R.Subscriptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StudentID == foreign.ID {
				local.R.Student = foreign
				if foreign.R == nil {
					foreign.R = &studentR{}
				}
				foreign.R.Subscriptions = append(foreign.R.Subscriptions, local)
				break
			}
		}
	}

	return nil
}

// LoadSubject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subscriptionL) LoadSubject(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubscription interface{}, mods queries.Applicator) error {
	var slice []*Subscription
	var object *Subscription

	if singular {
		object = maybeSubscription.(*Subscription)
	} else {
		slice = *maybeSubscription.(*[]*Subscription)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subscriptionR{}
		}
		args = append(args, object.SubjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subscriptionR{}
			}

			for _, a := range args {
				if a == obj.SubjectID {
					continue Outer
				}
			}

			args = append(args, obj.SubjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`subject`), qm.WhereIn(`subject.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Subject")
	}

	var resultSlice []*Subject
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Subject")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for subject")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subject")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Subject = foreign
		if foreign.R == nil {
			foreign.R = &subjectR{}
		}
		foreign.R.Subscriptions = append(foreign.R.Subscriptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SubjectID == foreign.ID {
				local.R.Subject = foreign
				if foreign.R == nil {
					foreign.R = &subjectR{}
				}
				foreign.R.Subscriptions = append(foreign.R.Subscriptions, local)
				break
			}
		}
	}

	return nil
}

// SetClass of the subscription to the related item.
// Sets o.R.Class to related.
// Adds o to related.R.Subscriptions.
func (o *Subscription) SetClass(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Class) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"subscription\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"class_id"}),
		strmangle.WhereClause("\"", "\"", 2, subscriptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ClassID = related.ID
	if o.R == nil {
		o.R = &subscriptionR{
			Class: related,
		}
	} else {
		o.R.Class = related
	}

	if related.R == nil {
		related.R = &classR{
			Subscriptions: SubscriptionSlice{o},
		}
	} else {
		related.R.Subscriptions = append(related.R.Subscriptions, o)
	}

	return nil
}

// SetDeposit of the subscription to the related item.
// Sets o.R.Deposit to related.
// Adds o to related.R.Subscriptions.
func (o *Subscription) SetDeposit(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Deposit) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"subscription\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"deposit_id"}),
		strmangle.WhereClause("\"", "\"", 2, subscriptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DepositID = related.ID
	if o.R == nil {
		o.R = &subscriptionR{
			Deposit: related,
		}
	} else {
		o.R.Deposit = related
	}

	if related.R == nil {
		related.R = &depositR{
			Subscriptions: SubscriptionSlice{o},
		}
	} else {
		related.R.Subscriptions = append(related.R.Subscriptions, o)
	}

	return nil
}

// SetPeriod of the subscription to the related item.
// Sets o.R.Period to related.
// Adds o to related.R.Subscriptions.
func (o *Subscription) SetPeriod(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Period) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"subscription\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"period_id"}),
		strmangle.WhereClause("\"", "\"", 2, subscriptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PeriodID, related.ID)
	if o.R == nil {
		o.R = &subscriptionR{
			Period: related,
		}
	} else {
		o.R.Period = related
	}

	if related.R == nil {
		related.R = &periodR{
			Subscriptions: SubscriptionSlice{o},
		}
	} else {
		related.R.Subscriptions = append(related.R.Subscriptions, o)
	}

	return nil
}

// RemovePeriod relationship.
// Sets o.R.Period to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Subscription) RemovePeriod(ctx context.Context, exec boil.ContextExecutor, related *Period) error {
	var err error

	queries.SetScanner(&o.PeriodID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("period_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Period = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Subscriptions {
		if queries.Equal(o.PeriodID, ri.PeriodID) {
			continue
		}

		ln := len(related.R.Subscriptions)
		if ln > 1 && i < ln-1 {
			related.R.Subscriptions[i] = related.R.Subscriptions[ln-1]
		}
		related.R.Subscriptions = related.R.Subscriptions[:ln-1]
		break
	}
	return nil
}

// SetStudent of the subscription to the related item.
// Sets o.R.Student to related.
// Adds o to related.R.Subscriptions.
func (o *Subscription) SetStudent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Student) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"subscription\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"student_id"}),
		strmangle.WhereClause("\"", "\"", 2, subscriptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StudentID = related.ID
	if o.R == nil {
		o.R = &subscriptionR{
			Student: related,
		}
	} else {
		o.R.Student = related
	}

	if related.R == nil {
		related.R = &studentR{
			Subscriptions: SubscriptionSlice{o},
		}
	} else {
		related.R.Subscriptions = append(related.R.Subscriptions, o)
	}

	return nil
}

// SetSubject of the subscription to the related item.
// Sets o.R.Subject to related.
// Adds o to related.R.Subscriptions.
func (o *Subscription) SetSubject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Subject) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"subscription\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"subject_id"}),
		strmangle.WhereClause("\"", "\"", 2, subscriptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SubjectID = related.ID
	if o.R == nil {
		o.R = &subscriptionR{
			Subject: related,
		}
	} else {
		o.R.Subject = related
	}

	if related.R == nil {
		related.R = &subjectR{
			Subscriptions: SubscriptionSlice{o},
		}
	} else {
		related.R.Subscriptions = append(related.R.Subscriptions, o)
	}

	return nil
}

// Subscriptions retrieves all the records using an executor.
func Subscriptions(mods ...qm.QueryMod) subscriptionQuery {
	mods = append(mods, qm.From("\"subscription\""))
	return subscriptionQuery{NewQuery(mods...)}
}

// FindSubscription retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSubscription(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Subscription, error) {
	subscriptionObj := &Subscription{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"subscription\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, subscriptionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from subscription")
	}

	return subscriptionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Subscription) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no subscription provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(subscriptionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	subscriptionInsertCacheMut.RLock()
	cache, cached := subscriptionInsertCache[key]
	subscriptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			subscriptionAllColumns,
			subscriptionColumnsWithDefault,
			subscriptionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(subscriptionType, subscriptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(subscriptionType, subscriptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"subscription\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"subscription\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into subscription")
	}

	if !cached {
		subscriptionInsertCacheMut.Lock()
		subscriptionInsertCache[key] = cache
		subscriptionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Subscription.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Subscription) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	subscriptionUpdateCacheMut.RLock()
	cache, cached := subscriptionUpdateCache[key]
	subscriptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			subscriptionAllColumns,
			subscriptionPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update subscription, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"subscription\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, subscriptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(subscriptionType, subscriptionMapping, append(wl, subscriptionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update subscription row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for subscription")
	}

	if !cached {
		subscriptionUpdateCacheMut.Lock()
		subscriptionUpdateCache[key] = cache
		subscriptionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q subscriptionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for subscription")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for subscription")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SubscriptionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"subscription\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, subscriptionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in subscription slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all subscription")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Subscription) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no subscription provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(subscriptionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	subscriptionUpsertCacheMut.RLock()
	cache, cached := subscriptionUpsertCache[key]
	subscriptionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			subscriptionAllColumns,
			subscriptionColumnsWithDefault,
			subscriptionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			subscriptionAllColumns,
			subscriptionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert subscription, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(subscriptionPrimaryKeyColumns))
			copy(conflict, subscriptionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"subscription\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(subscriptionType, subscriptionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(subscriptionType, subscriptionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert subscription")
	}

	if !cached {
		subscriptionUpsertCacheMut.Lock()
		subscriptionUpsertCache[key] = cache
		subscriptionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Subscription record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Subscription) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Subscription provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), subscriptionPrimaryKeyMapping)
	sql := "DELETE FROM \"subscription\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from subscription")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for subscription")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q subscriptionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no subscriptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from subscription")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for subscription")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SubscriptionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"subscription\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subscriptionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from subscription slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for subscription")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Subscription) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSubscription(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SubscriptionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SubscriptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"subscription\".* FROM \"subscription\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subscriptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SubscriptionSlice")
	}

	*o = slice

	return nil
}

// SubscriptionExists checks if the Subscription row exists.
func SubscriptionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"subscription\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if subscription exists")
	}

	return exists, nil
}
