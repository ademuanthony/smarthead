// Code generated by SQLBoiler 3.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Deposit is an object representing the database table.
type Deposit struct {
	ID         string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	StudentID  string      `boil:"student_id" json:"student_id" toml:"student_id" yaml:"student_id"`
	Amount     int         `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Ref        string      `boil:"ref" json:"ref" toml:"ref" yaml:"ref"`
	Status     string      `boil:"status" json:"status" toml:"status" yaml:"status"`
	Channel    string      `boil:"channel" json:"channel" toml:"channel" yaml:"channel"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	SubjectID  string      `boil:"subject_id" json:"subject_id" toml:"subject_id" yaml:"subject_id"`
	DaysOfWeek int         `boil:"days_of_week" json:"days_of_week" toml:"days_of_week" yaml:"days_of_week"`
	ClassID    string      `boil:"class_id" json:"class_id" toml:"class_id" yaml:"class_id"`
	PaymentRef string      `boil:"payment_ref" json:"payment_ref" toml:"payment_ref" yaml:"payment_ref"`
	PeriodID   null.String `boil:"period_id" json:"period_id,omitempty" toml:"period_id" yaml:"period_id,omitempty"`

	R *depositR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L depositL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DepositColumns = struct {
	ID         string
	StudentID  string
	Amount     string
	Ref        string
	Status     string
	Channel    string
	CreatedAt  string
	UpdatedAt  string
	SubjectID  string
	DaysOfWeek string
	ClassID    string
	PaymentRef string
	PeriodID   string
}{
	ID:         "id",
	StudentID:  "student_id",
	Amount:     "amount",
	Ref:        "ref",
	Status:     "status",
	Channel:    "channel",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	SubjectID:  "subject_id",
	DaysOfWeek: "days_of_week",
	ClassID:    "class_id",
	PaymentRef: "payment_ref",
	PeriodID:   "period_id",
}

// Generated where

var DepositWhere = struct {
	ID         whereHelperstring
	StudentID  whereHelperstring
	Amount     whereHelperint
	Ref        whereHelperstring
	Status     whereHelperstring
	Channel    whereHelperstring
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
	SubjectID  whereHelperstring
	DaysOfWeek whereHelperint
	ClassID    whereHelperstring
	PaymentRef whereHelperstring
	PeriodID   whereHelpernull_String
}{
	ID:         whereHelperstring{field: "\"deposits\".\"id\""},
	StudentID:  whereHelperstring{field: "\"deposits\".\"student_id\""},
	Amount:     whereHelperint{field: "\"deposits\".\"amount\""},
	Ref:        whereHelperstring{field: "\"deposits\".\"ref\""},
	Status:     whereHelperstring{field: "\"deposits\".\"status\""},
	Channel:    whereHelperstring{field: "\"deposits\".\"channel\""},
	CreatedAt:  whereHelpertime_Time{field: "\"deposits\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"deposits\".\"updated_at\""},
	SubjectID:  whereHelperstring{field: "\"deposits\".\"subject_id\""},
	DaysOfWeek: whereHelperint{field: "\"deposits\".\"days_of_week\""},
	ClassID:    whereHelperstring{field: "\"deposits\".\"class_id\""},
	PaymentRef: whereHelperstring{field: "\"deposits\".\"payment_ref\""},
	PeriodID:   whereHelpernull_String{field: "\"deposits\".\"period_id\""},
}

// DepositRels is where relationship names are stored.
var DepositRels = struct {
	Class         string
	Period        string
	Student       string
	Subject       string
	Subscriptions string
}{
	Class:         "Class",
	Period:        "Period",
	Student:       "Student",
	Subject:       "Subject",
	Subscriptions: "Subscriptions",
}

// depositR is where relationships are stored.
type depositR struct {
	Class         *Class
	Period        *Period
	Student       *Student
	Subject       *Subject
	Subscriptions SubscriptionSlice
}

// NewStruct creates a new relationship struct
func (*depositR) NewStruct() *depositR {
	return &depositR{}
}

// depositL is where Load methods for each relationship are stored.
type depositL struct{}

var (
	depositAllColumns            = []string{"id", "student_id", "amount", "ref", "status", "channel", "created_at", "updated_at", "subject_id", "days_of_week", "class_id", "payment_ref", "period_id"}
	depositColumnsWithoutDefault = []string{"id", "student_id", "amount", "ref", "status", "channel", "created_at", "updated_at", "subject_id", "days_of_week", "class_id", "period_id"}
	depositColumnsWithDefault    = []string{"payment_ref"}
	depositPrimaryKeyColumns     = []string{"id"}
)

type (
	// DepositSlice is an alias for a slice of pointers to Deposit.
	// This should generally be used opposed to []Deposit.
	DepositSlice []*Deposit

	depositQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	depositType                 = reflect.TypeOf(&Deposit{})
	depositMapping              = queries.MakeStructMapping(depositType)
	depositPrimaryKeyMapping, _ = queries.BindMapping(depositType, depositMapping, depositPrimaryKeyColumns)
	depositInsertCacheMut       sync.RWMutex
	depositInsertCache          = make(map[string]insertCache)
	depositUpdateCacheMut       sync.RWMutex
	depositUpdateCache          = make(map[string]updateCache)
	depositUpsertCacheMut       sync.RWMutex
	depositUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single deposit record from the query.
func (q depositQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Deposit, error) {
	o := &Deposit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for deposits")
	}

	return o, nil
}

// All returns all Deposit records from the query.
func (q depositQuery) All(ctx context.Context, exec boil.ContextExecutor) (DepositSlice, error) {
	var o []*Deposit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Deposit slice")
	}

	return o, nil
}

// Count returns the count of all Deposit records in the query.
func (q depositQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count deposits rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q depositQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if deposits exists")
	}

	return count > 0, nil
}

// Class pointed to by the foreign key.
func (o *Deposit) Class(mods ...qm.QueryMod) classQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ClassID),
	}

	queryMods = append(queryMods, mods...)

	query := Classes(queryMods...)
	queries.SetFrom(query.Query, "\"classes\"")

	return query
}

// Period pointed to by the foreign key.
func (o *Deposit) Period(mods ...qm.QueryMod) periodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PeriodID),
	}

	queryMods = append(queryMods, mods...)

	query := Periods(queryMods...)
	queries.SetFrom(query.Query, "\"period\"")

	return query
}

// Student pointed to by the foreign key.
func (o *Deposit) Student(mods ...qm.QueryMod) studentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StudentID),
	}

	queryMods = append(queryMods, mods...)

	query := Students(queryMods...)
	queries.SetFrom(query.Query, "\"student\"")

	return query
}

// Subject pointed to by the foreign key.
func (o *Deposit) Subject(mods ...qm.QueryMod) subjectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SubjectID),
	}

	queryMods = append(queryMods, mods...)

	query := Subjects(queryMods...)
	queries.SetFrom(query.Query, "\"subject\"")

	return query
}

// Subscriptions retrieves all the subscription's Subscriptions with an executor.
func (o *Deposit) Subscriptions(mods ...qm.QueryMod) subscriptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"subscription\".\"deposit_id\"=?", o.ID),
	)

	query := Subscriptions(queryMods...)
	queries.SetFrom(query.Query, "\"subscription\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"subscription\".*"})
	}

	return query
}

// LoadClass allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (depositL) LoadClass(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeposit interface{}, mods queries.Applicator) error {
	var slice []*Deposit
	var object *Deposit

	if singular {
		object = maybeDeposit.(*Deposit)
	} else {
		slice = *maybeDeposit.(*[]*Deposit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &depositR{}
		}
		args = append(args, object.ClassID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &depositR{}
			}

			for _, a := range args {
				if a == obj.ClassID {
					continue Outer
				}
			}

			args = append(args, obj.ClassID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`classes`), qm.WhereIn(`classes.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Class")
	}

	var resultSlice []*Class
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Class")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for classes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for classes")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Class = foreign
		if foreign.R == nil {
			foreign.R = &classR{}
		}
		foreign.R.Deposits = append(foreign.R.Deposits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ClassID == foreign.ID {
				local.R.Class = foreign
				if foreign.R == nil {
					foreign.R = &classR{}
				}
				foreign.R.Deposits = append(foreign.R.Deposits, local)
				break
			}
		}
	}

	return nil
}

// LoadPeriod allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (depositL) LoadPeriod(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeposit interface{}, mods queries.Applicator) error {
	var slice []*Deposit
	var object *Deposit

	if singular {
		object = maybeDeposit.(*Deposit)
	} else {
		slice = *maybeDeposit.(*[]*Deposit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &depositR{}
		}
		if !queries.IsNil(object.PeriodID) {
			args = append(args, object.PeriodID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &depositR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PeriodID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PeriodID) {
				args = append(args, obj.PeriodID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`period`), qm.WhereIn(`period.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Period")
	}

	var resultSlice []*Period
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Period")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for period")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for period")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Period = foreign
		if foreign.R == nil {
			foreign.R = &periodR{}
		}
		foreign.R.Deposits = append(foreign.R.Deposits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PeriodID, foreign.ID) {
				local.R.Period = foreign
				if foreign.R == nil {
					foreign.R = &periodR{}
				}
				foreign.R.Deposits = append(foreign.R.Deposits, local)
				break
			}
		}
	}

	return nil
}

// LoadStudent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (depositL) LoadStudent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeposit interface{}, mods queries.Applicator) error {
	var slice []*Deposit
	var object *Deposit

	if singular {
		object = maybeDeposit.(*Deposit)
	} else {
		slice = *maybeDeposit.(*[]*Deposit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &depositR{}
		}
		args = append(args, object.StudentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &depositR{}
			}

			for _, a := range args {
				if a == obj.StudentID {
					continue Outer
				}
			}

			args = append(args, obj.StudentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`student`), qm.WhereIn(`student.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Student")
	}

	var resultSlice []*Student
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Student")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for student")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for student")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Student = foreign
		if foreign.R == nil {
			foreign.R = &studentR{}
		}
		foreign.R.Deposits = append(foreign.R.Deposits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StudentID == foreign.ID {
				local.R.Student = foreign
				if foreign.R == nil {
					foreign.R = &studentR{}
				}
				foreign.R.Deposits = append(foreign.R.Deposits, local)
				break
			}
		}
	}

	return nil
}

// LoadSubject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (depositL) LoadSubject(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeposit interface{}, mods queries.Applicator) error {
	var slice []*Deposit
	var object *Deposit

	if singular {
		object = maybeDeposit.(*Deposit)
	} else {
		slice = *maybeDeposit.(*[]*Deposit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &depositR{}
		}
		args = append(args, object.SubjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &depositR{}
			}

			for _, a := range args {
				if a == obj.SubjectID {
					continue Outer
				}
			}

			args = append(args, obj.SubjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`subject`), qm.WhereIn(`subject.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Subject")
	}

	var resultSlice []*Subject
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Subject")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for subject")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subject")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Subject = foreign
		if foreign.R == nil {
			foreign.R = &subjectR{}
		}
		foreign.R.Deposits = append(foreign.R.Deposits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SubjectID == foreign.ID {
				local.R.Subject = foreign
				if foreign.R == nil {
					foreign.R = &subjectR{}
				}
				foreign.R.Deposits = append(foreign.R.Deposits, local)
				break
			}
		}
	}

	return nil
}

// LoadSubscriptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (depositL) LoadSubscriptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeposit interface{}, mods queries.Applicator) error {
	var slice []*Deposit
	var object *Deposit

	if singular {
		object = maybeDeposit.(*Deposit)
	} else {
		slice = *maybeDeposit.(*[]*Deposit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &depositR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &depositR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`subscription`), qm.WhereIn(`subscription.deposit_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load subscription")
	}

	var resultSlice []*Subscription
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice subscription")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on subscription")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subscription")
	}

	if singular {
		object.R.Subscriptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &subscriptionR{}
			}
			foreign.R.Deposit = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DepositID {
				local.R.Subscriptions = append(local.R.Subscriptions, foreign)
				if foreign.R == nil {
					foreign.R = &subscriptionR{}
				}
				foreign.R.Deposit = local
				break
			}
		}
	}

	return nil
}

// SetClass of the deposit to the related item.
// Sets o.R.Class to related.
// Adds o to related.R.Deposits.
func (o *Deposit) SetClass(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Class) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"deposits\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"class_id"}),
		strmangle.WhereClause("\"", "\"", 2, depositPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ClassID = related.ID
	if o.R == nil {
		o.R = &depositR{
			Class: related,
		}
	} else {
		o.R.Class = related
	}

	if related.R == nil {
		related.R = &classR{
			Deposits: DepositSlice{o},
		}
	} else {
		related.R.Deposits = append(related.R.Deposits, o)
	}

	return nil
}

// SetPeriod of the deposit to the related item.
// Sets o.R.Period to related.
// Adds o to related.R.Deposits.
func (o *Deposit) SetPeriod(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Period) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"deposits\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"period_id"}),
		strmangle.WhereClause("\"", "\"", 2, depositPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PeriodID, related.ID)
	if o.R == nil {
		o.R = &depositR{
			Period: related,
		}
	} else {
		o.R.Period = related
	}

	if related.R == nil {
		related.R = &periodR{
			Deposits: DepositSlice{o},
		}
	} else {
		related.R.Deposits = append(related.R.Deposits, o)
	}

	return nil
}

// RemovePeriod relationship.
// Sets o.R.Period to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Deposit) RemovePeriod(ctx context.Context, exec boil.ContextExecutor, related *Period) error {
	var err error

	queries.SetScanner(&o.PeriodID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("period_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Period = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Deposits {
		if queries.Equal(o.PeriodID, ri.PeriodID) {
			continue
		}

		ln := len(related.R.Deposits)
		if ln > 1 && i < ln-1 {
			related.R.Deposits[i] = related.R.Deposits[ln-1]
		}
		related.R.Deposits = related.R.Deposits[:ln-1]
		break
	}
	return nil
}

// SetStudent of the deposit to the related item.
// Sets o.R.Student to related.
// Adds o to related.R.Deposits.
func (o *Deposit) SetStudent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Student) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"deposits\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"student_id"}),
		strmangle.WhereClause("\"", "\"", 2, depositPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StudentID = related.ID
	if o.R == nil {
		o.R = &depositR{
			Student: related,
		}
	} else {
		o.R.Student = related
	}

	if related.R == nil {
		related.R = &studentR{
			Deposits: DepositSlice{o},
		}
	} else {
		related.R.Deposits = append(related.R.Deposits, o)
	}

	return nil
}

// SetSubject of the deposit to the related item.
// Sets o.R.Subject to related.
// Adds o to related.R.Deposits.
func (o *Deposit) SetSubject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Subject) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"deposits\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"subject_id"}),
		strmangle.WhereClause("\"", "\"", 2, depositPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SubjectID = related.ID
	if o.R == nil {
		o.R = &depositR{
			Subject: related,
		}
	} else {
		o.R.Subject = related
	}

	if related.R == nil {
		related.R = &subjectR{
			Deposits: DepositSlice{o},
		}
	} else {
		related.R.Deposits = append(related.R.Deposits, o)
	}

	return nil
}

// AddSubscriptions adds the given related objects to the existing relationships
// of the deposit, optionally inserting them as new records.
// Appends related to o.R.Subscriptions.
// Sets related.R.Deposit appropriately.
func (o *Deposit) AddSubscriptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Subscription) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DepositID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"subscription\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"deposit_id"}),
				strmangle.WhereClause("\"", "\"", 2, subscriptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DepositID = o.ID
		}
	}

	if o.R == nil {
		o.R = &depositR{
			Subscriptions: related,
		}
	} else {
		o.R.Subscriptions = append(o.R.Subscriptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &subscriptionR{
				Deposit: o,
			}
		} else {
			rel.R.Deposit = o
		}
	}
	return nil
}

// Deposits retrieves all the records using an executor.
func Deposits(mods ...qm.QueryMod) depositQuery {
	mods = append(mods, qm.From("\"deposits\""))
	return depositQuery{NewQuery(mods...)}
}

// FindDeposit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeposit(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Deposit, error) {
	depositObj := &Deposit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"deposits\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, depositObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from deposits")
	}

	return depositObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Deposit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no deposits provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(depositColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	depositInsertCacheMut.RLock()
	cache, cached := depositInsertCache[key]
	depositInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			depositAllColumns,
			depositColumnsWithDefault,
			depositColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(depositType, depositMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(depositType, depositMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"deposits\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"deposits\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into deposits")
	}

	if !cached {
		depositInsertCacheMut.Lock()
		depositInsertCache[key] = cache
		depositInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Deposit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Deposit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	depositUpdateCacheMut.RLock()
	cache, cached := depositUpdateCache[key]
	depositUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			depositAllColumns,
			depositPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update deposits, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"deposits\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, depositPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(depositType, depositMapping, append(wl, depositPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update deposits row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for deposits")
	}

	if !cached {
		depositUpdateCacheMut.Lock()
		depositUpdateCache[key] = cache
		depositUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q depositQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for deposits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for deposits")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DepositSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), depositPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"deposits\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, depositPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in deposit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all deposit")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Deposit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no deposits provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(depositColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	depositUpsertCacheMut.RLock()
	cache, cached := depositUpsertCache[key]
	depositUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			depositAllColumns,
			depositColumnsWithDefault,
			depositColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			depositAllColumns,
			depositPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert deposits, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(depositPrimaryKeyColumns))
			copy(conflict, depositPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"deposits\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(depositType, depositMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(depositType, depositMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert deposits")
	}

	if !cached {
		depositUpsertCacheMut.Lock()
		depositUpsertCache[key] = cache
		depositUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Deposit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Deposit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Deposit provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), depositPrimaryKeyMapping)
	sql := "DELETE FROM \"deposits\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from deposits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for deposits")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q depositQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no depositQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from deposits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for deposits")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DepositSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), depositPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"deposits\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, depositPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from deposit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for deposits")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Deposit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeposit(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DepositSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DepositSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), depositPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"deposits\".* FROM \"deposits\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, depositPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DepositSlice")
	}

	*o = slice

	return nil
}

// DepositExists checks if the Deposit row exists.
func DepositExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"deposits\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if deposits exists")
	}

	return exists, nil
}
