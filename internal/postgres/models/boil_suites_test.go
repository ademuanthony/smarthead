// Code generated by SQLBoiler 3.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Accounts", testAccounts)
	t.Run("Classes", testClasses)
	t.Run("Deposits", testDeposits)
	t.Run("Lessons", testLessons)
	t.Run("LessonStudents", testLessonStudents)
	t.Run("Periods", testPeriods)
	t.Run("Students", testStudents)
	t.Run("Subclasses", testSubclasses)
	t.Run("Subjects", testSubjects)
	t.Run("Subscriptions", testSubscriptions)
	t.Run("Teachers", testTeachers)
	t.Run("Timetables", testTimetables)
	t.Run("Users", testUsers)
	t.Run("UsersAccounts", testUsersAccounts)
}

func TestDelete(t *testing.T) {
	t.Run("Accounts", testAccountsDelete)
	t.Run("Classes", testClassesDelete)
	t.Run("Deposits", testDepositsDelete)
	t.Run("Lessons", testLessonsDelete)
	t.Run("LessonStudents", testLessonStudentsDelete)
	t.Run("Periods", testPeriodsDelete)
	t.Run("Students", testStudentsDelete)
	t.Run("Subclasses", testSubclassesDelete)
	t.Run("Subjects", testSubjectsDelete)
	t.Run("Subscriptions", testSubscriptionsDelete)
	t.Run("Teachers", testTeachersDelete)
	t.Run("Timetables", testTimetablesDelete)
	t.Run("Users", testUsersDelete)
	t.Run("UsersAccounts", testUsersAccountsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Accounts", testAccountsQueryDeleteAll)
	t.Run("Classes", testClassesQueryDeleteAll)
	t.Run("Deposits", testDepositsQueryDeleteAll)
	t.Run("Lessons", testLessonsQueryDeleteAll)
	t.Run("LessonStudents", testLessonStudentsQueryDeleteAll)
	t.Run("Periods", testPeriodsQueryDeleteAll)
	t.Run("Students", testStudentsQueryDeleteAll)
	t.Run("Subclasses", testSubclassesQueryDeleteAll)
	t.Run("Subjects", testSubjectsQueryDeleteAll)
	t.Run("Subscriptions", testSubscriptionsQueryDeleteAll)
	t.Run("Teachers", testTeachersQueryDeleteAll)
	t.Run("Timetables", testTimetablesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("UsersAccounts", testUsersAccountsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Accounts", testAccountsSliceDeleteAll)
	t.Run("Classes", testClassesSliceDeleteAll)
	t.Run("Deposits", testDepositsSliceDeleteAll)
	t.Run("Lessons", testLessonsSliceDeleteAll)
	t.Run("LessonStudents", testLessonStudentsSliceDeleteAll)
	t.Run("Periods", testPeriodsSliceDeleteAll)
	t.Run("Students", testStudentsSliceDeleteAll)
	t.Run("Subclasses", testSubclassesSliceDeleteAll)
	t.Run("Subjects", testSubjectsSliceDeleteAll)
	t.Run("Subscriptions", testSubscriptionsSliceDeleteAll)
	t.Run("Teachers", testTeachersSliceDeleteAll)
	t.Run("Timetables", testTimetablesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("UsersAccounts", testUsersAccountsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Accounts", testAccountsExists)
	t.Run("Classes", testClassesExists)
	t.Run("Deposits", testDepositsExists)
	t.Run("Lessons", testLessonsExists)
	t.Run("LessonStudents", testLessonStudentsExists)
	t.Run("Periods", testPeriodsExists)
	t.Run("Students", testStudentsExists)
	t.Run("Subclasses", testSubclassesExists)
	t.Run("Subjects", testSubjectsExists)
	t.Run("Subscriptions", testSubscriptionsExists)
	t.Run("Teachers", testTeachersExists)
	t.Run("Timetables", testTimetablesExists)
	t.Run("Users", testUsersExists)
	t.Run("UsersAccounts", testUsersAccountsExists)
}

func TestFind(t *testing.T) {
	t.Run("Accounts", testAccountsFind)
	t.Run("Classes", testClassesFind)
	t.Run("Deposits", testDepositsFind)
	t.Run("Lessons", testLessonsFind)
	t.Run("LessonStudents", testLessonStudentsFind)
	t.Run("Periods", testPeriodsFind)
	t.Run("Students", testStudentsFind)
	t.Run("Subclasses", testSubclassesFind)
	t.Run("Subjects", testSubjectsFind)
	t.Run("Subscriptions", testSubscriptionsFind)
	t.Run("Teachers", testTeachersFind)
	t.Run("Timetables", testTimetablesFind)
	t.Run("Users", testUsersFind)
	t.Run("UsersAccounts", testUsersAccountsFind)
}

func TestBind(t *testing.T) {
	t.Run("Accounts", testAccountsBind)
	t.Run("Classes", testClassesBind)
	t.Run("Deposits", testDepositsBind)
	t.Run("Lessons", testLessonsBind)
	t.Run("LessonStudents", testLessonStudentsBind)
	t.Run("Periods", testPeriodsBind)
	t.Run("Students", testStudentsBind)
	t.Run("Subclasses", testSubclassesBind)
	t.Run("Subjects", testSubjectsBind)
	t.Run("Subscriptions", testSubscriptionsBind)
	t.Run("Teachers", testTeachersBind)
	t.Run("Timetables", testTimetablesBind)
	t.Run("Users", testUsersBind)
	t.Run("UsersAccounts", testUsersAccountsBind)
}

func TestOne(t *testing.T) {
	t.Run("Accounts", testAccountsOne)
	t.Run("Classes", testClassesOne)
	t.Run("Deposits", testDepositsOne)
	t.Run("Lessons", testLessonsOne)
	t.Run("LessonStudents", testLessonStudentsOne)
	t.Run("Periods", testPeriodsOne)
	t.Run("Students", testStudentsOne)
	t.Run("Subclasses", testSubclassesOne)
	t.Run("Subjects", testSubjectsOne)
	t.Run("Subscriptions", testSubscriptionsOne)
	t.Run("Teachers", testTeachersOne)
	t.Run("Timetables", testTimetablesOne)
	t.Run("Users", testUsersOne)
	t.Run("UsersAccounts", testUsersAccountsOne)
}

func TestAll(t *testing.T) {
	t.Run("Accounts", testAccountsAll)
	t.Run("Classes", testClassesAll)
	t.Run("Deposits", testDepositsAll)
	t.Run("Lessons", testLessonsAll)
	t.Run("LessonStudents", testLessonStudentsAll)
	t.Run("Periods", testPeriodsAll)
	t.Run("Students", testStudentsAll)
	t.Run("Subclasses", testSubclassesAll)
	t.Run("Subjects", testSubjectsAll)
	t.Run("Subscriptions", testSubscriptionsAll)
	t.Run("Teachers", testTeachersAll)
	t.Run("Timetables", testTimetablesAll)
	t.Run("Users", testUsersAll)
	t.Run("UsersAccounts", testUsersAccountsAll)
}

func TestCount(t *testing.T) {
	t.Run("Accounts", testAccountsCount)
	t.Run("Classes", testClassesCount)
	t.Run("Deposits", testDepositsCount)
	t.Run("Lessons", testLessonsCount)
	t.Run("LessonStudents", testLessonStudentsCount)
	t.Run("Periods", testPeriodsCount)
	t.Run("Students", testStudentsCount)
	t.Run("Subclasses", testSubclassesCount)
	t.Run("Subjects", testSubjectsCount)
	t.Run("Subscriptions", testSubscriptionsCount)
	t.Run("Teachers", testTeachersCount)
	t.Run("Timetables", testTimetablesCount)
	t.Run("Users", testUsersCount)
	t.Run("UsersAccounts", testUsersAccountsCount)
}

func TestInsert(t *testing.T) {
	t.Run("Accounts", testAccountsInsert)
	t.Run("Accounts", testAccountsInsertWhitelist)
	t.Run("Classes", testClassesInsert)
	t.Run("Classes", testClassesInsertWhitelist)
	t.Run("Deposits", testDepositsInsert)
	t.Run("Deposits", testDepositsInsertWhitelist)
	t.Run("Lessons", testLessonsInsert)
	t.Run("Lessons", testLessonsInsertWhitelist)
	t.Run("LessonStudents", testLessonStudentsInsert)
	t.Run("LessonStudents", testLessonStudentsInsertWhitelist)
	t.Run("Periods", testPeriodsInsert)
	t.Run("Periods", testPeriodsInsertWhitelist)
	t.Run("Students", testStudentsInsert)
	t.Run("Students", testStudentsInsertWhitelist)
	t.Run("Subclasses", testSubclassesInsert)
	t.Run("Subclasses", testSubclassesInsertWhitelist)
	t.Run("Subjects", testSubjectsInsert)
	t.Run("Subjects", testSubjectsInsertWhitelist)
	t.Run("Subscriptions", testSubscriptionsInsert)
	t.Run("Subscriptions", testSubscriptionsInsertWhitelist)
	t.Run("Teachers", testTeachersInsert)
	t.Run("Teachers", testTeachersInsertWhitelist)
	t.Run("Timetables", testTimetablesInsert)
	t.Run("Timetables", testTimetablesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("UsersAccounts", testUsersAccountsInsert)
	t.Run("UsersAccounts", testUsersAccountsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AccountToUserUsingBillingUser", testAccountToOneUserUsingBillingUser)
	t.Run("AccountToUserUsingSignupUser", testAccountToOneUserUsingSignupUser)
	t.Run("DepositToClassUsingClass", testDepositToOneClassUsingClass)
	t.Run("DepositToPeriodUsingPeriod", testDepositToOnePeriodUsingPeriod)
	t.Run("DepositToStudentUsingStudent", testDepositToOneStudentUsingStudent)
	t.Run("DepositToSubjectUsingSubject", testDepositToOneSubjectUsingSubject)
	t.Run("LessonToTimetableUsingTimetable", testLessonToOneTimetableUsingTimetable)
	t.Run("LessonStudentToLessonUsingLesson", testLessonStudentToOneLessonUsingLesson)
	t.Run("LessonStudentToStudentUsingStudent", testLessonStudentToOneStudentUsingStudent)
	t.Run("StudentToClassUsingClass", testStudentToOneClassUsingClass)
	t.Run("StudentToSubclassUsingSubclass", testStudentToOneSubclassUsingSubclass)
	t.Run("SubclassToClassUsingClass", testSubclassToOneClassUsingClass)
	t.Run("SubscriptionToClassUsingClass", testSubscriptionToOneClassUsingClass)
	t.Run("SubscriptionToDepositUsingDeposit", testSubscriptionToOneDepositUsingDeposit)
	t.Run("SubscriptionToPeriodUsingPeriod", testSubscriptionToOnePeriodUsingPeriod)
	t.Run("SubscriptionToStudentUsingStudent", testSubscriptionToOneStudentUsingStudent)
	t.Run("SubscriptionToSubjectUsingSubject", testSubscriptionToOneSubjectUsingSubject)
	t.Run("TimetableToPeriodUsingPeriod", testTimetableToOnePeriodUsingPeriod)
	t.Run("TimetableToSubclassUsingSubclass", testTimetableToOneSubclassUsingSubclass)
	t.Run("TimetableToSubjectUsingSubject", testTimetableToOneSubjectUsingSubject)
	t.Run("TimetableToUserUsingTeacher", testTimetableToOneUserUsingTeacher)
	t.Run("UsersAccountToAccountUsingAccount", testUsersAccountToOneAccountUsingAccount)
	t.Run("UsersAccountToUserUsingUser", testUsersAccountToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AccountToUsersAccounts", testAccountToManyUsersAccounts)
	t.Run("ClassToDeposits", testClassToManyDeposits)
	t.Run("ClassToStudents", testClassToManyStudents)
	t.Run("ClassToSubclasses", testClassToManySubclasses)
	t.Run("ClassToSubscriptions", testClassToManySubscriptions)
	t.Run("DepositToSubscriptions", testDepositToManySubscriptions)
	t.Run("LessonToLessonStudents", testLessonToManyLessonStudents)
	t.Run("PeriodToDeposits", testPeriodToManyDeposits)
	t.Run("PeriodToStudents", testPeriodToManyStudents)
	t.Run("PeriodToSubscriptions", testPeriodToManySubscriptions)
	t.Run("PeriodToTimetables", testPeriodToManyTimetables)
	t.Run("StudentToDeposits", testStudentToManyDeposits)
	t.Run("StudentToLessonStudents", testStudentToManyLessonStudents)
	t.Run("StudentToPeriods", testStudentToManyPeriods)
	t.Run("StudentToSubjects", testStudentToManySubjects)
	t.Run("StudentToSubscriptions", testStudentToManySubscriptions)
	t.Run("SubclassToStudents", testSubclassToManyStudents)
	t.Run("SubclassToTimetables", testSubclassToManyTimetables)
	t.Run("SubjectToDeposits", testSubjectToManyDeposits)
	t.Run("SubjectToTeachers", testSubjectToManyTeachers)
	t.Run("SubjectToStudents", testSubjectToManyStudents)
	t.Run("SubjectToSubscriptions", testSubjectToManySubscriptions)
	t.Run("SubjectToTimetables", testSubjectToManyTimetables)
	t.Run("TeacherToSubjects", testTeacherToManySubjects)
	t.Run("TimetableToLessons", testTimetableToManyLessons)
	t.Run("UserToBillingUserAccounts", testUserToManyBillingUserAccounts)
	t.Run("UserToSignupUserAccounts", testUserToManySignupUserAccounts)
	t.Run("UserToTeacherTimetables", testUserToManyTeacherTimetables)
	t.Run("UserToUsersAccounts", testUserToManyUsersAccounts)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AccountToUserUsingBillingUserAccounts", testAccountToOneSetOpUserUsingBillingUser)
	t.Run("AccountToUserUsingSignupUserAccounts", testAccountToOneSetOpUserUsingSignupUser)
	t.Run("DepositToClassUsingDeposits", testDepositToOneSetOpClassUsingClass)
	t.Run("DepositToPeriodUsingDeposits", testDepositToOneSetOpPeriodUsingPeriod)
	t.Run("DepositToStudentUsingDeposits", testDepositToOneSetOpStudentUsingStudent)
	t.Run("DepositToSubjectUsingDeposits", testDepositToOneSetOpSubjectUsingSubject)
	t.Run("LessonToTimetableUsingLessons", testLessonToOneSetOpTimetableUsingTimetable)
	t.Run("LessonStudentToLessonUsingLessonStudents", testLessonStudentToOneSetOpLessonUsingLesson)
	t.Run("LessonStudentToStudentUsingLessonStudents", testLessonStudentToOneSetOpStudentUsingStudent)
	t.Run("StudentToClassUsingStudents", testStudentToOneSetOpClassUsingClass)
	t.Run("StudentToSubclassUsingStudents", testStudentToOneSetOpSubclassUsingSubclass)
	t.Run("SubclassToClassUsingSubclasses", testSubclassToOneSetOpClassUsingClass)
	t.Run("SubscriptionToClassUsingSubscriptions", testSubscriptionToOneSetOpClassUsingClass)
	t.Run("SubscriptionToDepositUsingSubscriptions", testSubscriptionToOneSetOpDepositUsingDeposit)
	t.Run("SubscriptionToPeriodUsingSubscriptions", testSubscriptionToOneSetOpPeriodUsingPeriod)
	t.Run("SubscriptionToStudentUsingSubscriptions", testSubscriptionToOneSetOpStudentUsingStudent)
	t.Run("SubscriptionToSubjectUsingSubscriptions", testSubscriptionToOneSetOpSubjectUsingSubject)
	t.Run("TimetableToPeriodUsingTimetables", testTimetableToOneSetOpPeriodUsingPeriod)
	t.Run("TimetableToSubclassUsingTimetables", testTimetableToOneSetOpSubclassUsingSubclass)
	t.Run("TimetableToSubjectUsingTimetables", testTimetableToOneSetOpSubjectUsingSubject)
	t.Run("TimetableToUserUsingTeacherTimetables", testTimetableToOneSetOpUserUsingTeacher)
	t.Run("UsersAccountToAccountUsingUsersAccounts", testUsersAccountToOneSetOpAccountUsingAccount)
	t.Run("UsersAccountToUserUsingUsersAccounts", testUsersAccountToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("AccountToUserUsingBillingUserAccounts", testAccountToOneRemoveOpUserUsingBillingUser)
	t.Run("AccountToUserUsingSignupUserAccounts", testAccountToOneRemoveOpUserUsingSignupUser)
	t.Run("DepositToPeriodUsingDeposits", testDepositToOneRemoveOpPeriodUsingPeriod)
	t.Run("StudentToClassUsingStudents", testStudentToOneRemoveOpClassUsingClass)
	t.Run("StudentToSubclassUsingStudents", testStudentToOneRemoveOpSubclassUsingSubclass)
	t.Run("SubscriptionToPeriodUsingSubscriptions", testSubscriptionToOneRemoveOpPeriodUsingPeriod)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AccountToUsersAccounts", testAccountToManyAddOpUsersAccounts)
	t.Run("ClassToDeposits", testClassToManyAddOpDeposits)
	t.Run("ClassToStudents", testClassToManyAddOpStudents)
	t.Run("ClassToSubclasses", testClassToManyAddOpSubclasses)
	t.Run("ClassToSubscriptions", testClassToManyAddOpSubscriptions)
	t.Run("DepositToSubscriptions", testDepositToManyAddOpSubscriptions)
	t.Run("LessonToLessonStudents", testLessonToManyAddOpLessonStudents)
	t.Run("PeriodToDeposits", testPeriodToManyAddOpDeposits)
	t.Run("PeriodToStudents", testPeriodToManyAddOpStudents)
	t.Run("PeriodToSubscriptions", testPeriodToManyAddOpSubscriptions)
	t.Run("PeriodToTimetables", testPeriodToManyAddOpTimetables)
	t.Run("StudentToDeposits", testStudentToManyAddOpDeposits)
	t.Run("StudentToLessonStudents", testStudentToManyAddOpLessonStudents)
	t.Run("StudentToPeriods", testStudentToManyAddOpPeriods)
	t.Run("StudentToSubjects", testStudentToManyAddOpSubjects)
	t.Run("StudentToSubscriptions", testStudentToManyAddOpSubscriptions)
	t.Run("SubclassToStudents", testSubclassToManyAddOpStudents)
	t.Run("SubclassToTimetables", testSubclassToManyAddOpTimetables)
	t.Run("SubjectToDeposits", testSubjectToManyAddOpDeposits)
	t.Run("SubjectToTeachers", testSubjectToManyAddOpTeachers)
	t.Run("SubjectToStudents", testSubjectToManyAddOpStudents)
	t.Run("SubjectToSubscriptions", testSubjectToManyAddOpSubscriptions)
	t.Run("SubjectToTimetables", testSubjectToManyAddOpTimetables)
	t.Run("TeacherToSubjects", testTeacherToManyAddOpSubjects)
	t.Run("TimetableToLessons", testTimetableToManyAddOpLessons)
	t.Run("UserToBillingUserAccounts", testUserToManyAddOpBillingUserAccounts)
	t.Run("UserToSignupUserAccounts", testUserToManyAddOpSignupUserAccounts)
	t.Run("UserToTeacherTimetables", testUserToManyAddOpTeacherTimetables)
	t.Run("UserToUsersAccounts", testUserToManyAddOpUsersAccounts)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("ClassToStudents", testClassToManySetOpStudents)
	t.Run("PeriodToDeposits", testPeriodToManySetOpDeposits)
	t.Run("PeriodToStudents", testPeriodToManySetOpStudents)
	t.Run("PeriodToSubscriptions", testPeriodToManySetOpSubscriptions)
	t.Run("StudentToPeriods", testStudentToManySetOpPeriods)
	t.Run("StudentToSubjects", testStudentToManySetOpSubjects)
	t.Run("SubclassToStudents", testSubclassToManySetOpStudents)
	t.Run("SubjectToTeachers", testSubjectToManySetOpTeachers)
	t.Run("SubjectToStudents", testSubjectToManySetOpStudents)
	t.Run("TeacherToSubjects", testTeacherToManySetOpSubjects)
	t.Run("UserToBillingUserAccounts", testUserToManySetOpBillingUserAccounts)
	t.Run("UserToSignupUserAccounts", testUserToManySetOpSignupUserAccounts)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("ClassToStudents", testClassToManyRemoveOpStudents)
	t.Run("PeriodToDeposits", testPeriodToManyRemoveOpDeposits)
	t.Run("PeriodToStudents", testPeriodToManyRemoveOpStudents)
	t.Run("PeriodToSubscriptions", testPeriodToManyRemoveOpSubscriptions)
	t.Run("StudentToPeriods", testStudentToManyRemoveOpPeriods)
	t.Run("StudentToSubjects", testStudentToManyRemoveOpSubjects)
	t.Run("SubclassToStudents", testSubclassToManyRemoveOpStudents)
	t.Run("SubjectToTeachers", testSubjectToManyRemoveOpTeachers)
	t.Run("SubjectToStudents", testSubjectToManyRemoveOpStudents)
	t.Run("TeacherToSubjects", testTeacherToManyRemoveOpSubjects)
	t.Run("UserToBillingUserAccounts", testUserToManyRemoveOpBillingUserAccounts)
	t.Run("UserToSignupUserAccounts", testUserToManyRemoveOpSignupUserAccounts)
}

func TestReload(t *testing.T) {
	t.Run("Accounts", testAccountsReload)
	t.Run("Classes", testClassesReload)
	t.Run("Deposits", testDepositsReload)
	t.Run("Lessons", testLessonsReload)
	t.Run("LessonStudents", testLessonStudentsReload)
	t.Run("Periods", testPeriodsReload)
	t.Run("Students", testStudentsReload)
	t.Run("Subclasses", testSubclassesReload)
	t.Run("Subjects", testSubjectsReload)
	t.Run("Subscriptions", testSubscriptionsReload)
	t.Run("Teachers", testTeachersReload)
	t.Run("Timetables", testTimetablesReload)
	t.Run("Users", testUsersReload)
	t.Run("UsersAccounts", testUsersAccountsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Accounts", testAccountsReloadAll)
	t.Run("Classes", testClassesReloadAll)
	t.Run("Deposits", testDepositsReloadAll)
	t.Run("Lessons", testLessonsReloadAll)
	t.Run("LessonStudents", testLessonStudentsReloadAll)
	t.Run("Periods", testPeriodsReloadAll)
	t.Run("Students", testStudentsReloadAll)
	t.Run("Subclasses", testSubclassesReloadAll)
	t.Run("Subjects", testSubjectsReloadAll)
	t.Run("Subscriptions", testSubscriptionsReloadAll)
	t.Run("Teachers", testTeachersReloadAll)
	t.Run("Timetables", testTimetablesReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("UsersAccounts", testUsersAccountsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Accounts", testAccountsSelect)
	t.Run("Classes", testClassesSelect)
	t.Run("Deposits", testDepositsSelect)
	t.Run("Lessons", testLessonsSelect)
	t.Run("LessonStudents", testLessonStudentsSelect)
	t.Run("Periods", testPeriodsSelect)
	t.Run("Students", testStudentsSelect)
	t.Run("Subclasses", testSubclassesSelect)
	t.Run("Subjects", testSubjectsSelect)
	t.Run("Subscriptions", testSubscriptionsSelect)
	t.Run("Teachers", testTeachersSelect)
	t.Run("Timetables", testTimetablesSelect)
	t.Run("Users", testUsersSelect)
	t.Run("UsersAccounts", testUsersAccountsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Accounts", testAccountsUpdate)
	t.Run("Classes", testClassesUpdate)
	t.Run("Deposits", testDepositsUpdate)
	t.Run("Lessons", testLessonsUpdate)
	t.Run("LessonStudents", testLessonStudentsUpdate)
	t.Run("Periods", testPeriodsUpdate)
	t.Run("Students", testStudentsUpdate)
	t.Run("Subclasses", testSubclassesUpdate)
	t.Run("Subjects", testSubjectsUpdate)
	t.Run("Subscriptions", testSubscriptionsUpdate)
	t.Run("Teachers", testTeachersUpdate)
	t.Run("Timetables", testTimetablesUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("UsersAccounts", testUsersAccountsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Accounts", testAccountsSliceUpdateAll)
	t.Run("Classes", testClassesSliceUpdateAll)
	t.Run("Deposits", testDepositsSliceUpdateAll)
	t.Run("Lessons", testLessonsSliceUpdateAll)
	t.Run("LessonStudents", testLessonStudentsSliceUpdateAll)
	t.Run("Periods", testPeriodsSliceUpdateAll)
	t.Run("Students", testStudentsSliceUpdateAll)
	t.Run("Subclasses", testSubclassesSliceUpdateAll)
	t.Run("Subjects", testSubjectsSliceUpdateAll)
	t.Run("Subscriptions", testSubscriptionsSliceUpdateAll)
	t.Run("Teachers", testTeachersSliceUpdateAll)
	t.Run("Timetables", testTimetablesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("UsersAccounts", testUsersAccountsSliceUpdateAll)
}
